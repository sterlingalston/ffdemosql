-- =============================================================================
-- Fiserv-Style Demo Financial Services Database for Azure SQL Server
-- Converted from Snowflake to Azure SQL Server DDL
-- Sample database schema representing financial technology infrastructure
-- This is educational demo data only and not based on actual Fiserv systems
-- =============================================================================

-- =============================================================================
-- DATABASE AND SCHEMA CREATION
-- =============================================================================

-- Create database (uncomment if creating new database)
-- CREATE DATABASE FISERV_DEMO;
-- USE FISERV_DEMO;

-- Create schemas
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'CORE')
    EXEC('CREATE SCHEMA CORE');

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'PAYMENTS')
    EXEC('CREATE SCHEMA PAYMENTS');

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'CARDS')
    EXEC('CREATE SCHEMA CARDS');

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'DIGITAL')
    EXEC('CREATE SCHEMA DIGITAL');

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'RISK')
    EXEC('CREATE SCHEMA RISK');

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'COMPLIANCE')
    EXEC('CREATE SCHEMA COMPLIANCE');

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ANALYTICS')
    EXEC('CREATE SCHEMA ANALYTICS');

-- =============================================================================
-- CORE BANKING ENTITIES
-- =============================================================================

-- Financial Institutions (Banks/Credit Unions that use the platform)
IF OBJECT_ID('CORE.FINANCIAL_INSTITUTIONS', 'U') IS NOT NULL
    DROP TABLE CORE.FINANCIAL_INSTITUTIONS;

CREATE TABLE CORE.FINANCIAL_INSTITUTIONS (
    INSTITUTION_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_CODE VARCHAR(20) NOT NULL,
    INSTITUTION_NAME VARCHAR(200) NOT NULL,
    INSTITUTION_TYPE VARCHAR(50) NOT NULL,
    ROUTING_NUMBER VARCHAR(9) NOT NULL,
    SWIFT_CODE VARCHAR(11) NULL,
    ADDRESS VARCHAR(500) NULL,
    CITY VARCHAR(100) NULL,
    STATE VARCHAR(50) NULL,
    ZIP_CODE VARCHAR(20) NULL,
    COUNTRY VARCHAR(100) DEFAULT 'USA',
    REGULATION_LEVEL VARCHAR(50) NOT NULL,
    ASSETS_UNDER_MANAGEMENT DECIMAL(18,2) NULL,
    CUSTOMER_COUNT BIGINT NULL,
    PLATFORM_ONBOARD_DATE DATETIME2 NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'Active',
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    -- Primary key and unique constraints
    CONSTRAINT PK_FINANCIAL_INSTITUTIONS PRIMARY KEY (INSTITUTION_ID),
    CONSTRAINT UQ_FINANCIAL_INSTITUTIONS_CODE UNIQUE (INSTITUTION_CODE),
    CONSTRAINT UQ_FINANCIAL_INSTITUTIONS_ROUTING UNIQUE (ROUTING_NUMBER)
);

-- Customer/Account Holders
IF OBJECT_ID('CORE.CUSTOMERS', 'U') IS NOT NULL
    DROP TABLE CORE.CUSTOMERS;

CREATE TABLE CORE.CUSTOMERS (
    CUSTOMER_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    CUSTOMER_NUMBER VARCHAR(50) NOT NULL,
    CUSTOMER_TYPE VARCHAR(20) NOT NULL,
    FIRST_NAME VARCHAR(100) NULL,
    LAST_NAME VARCHAR(100) NULL,
    BUSINESS_NAME VARCHAR(200) NULL,
    DATE_OF_BIRTH DATE NULL,
    SSN_ENCRYPTED VARBINARY(256) NULL,
    EIN_ENCRYPTED VARBINARY(256) NULL,
    EMAIL VARCHAR(250) NULL,
    PHONE VARCHAR(20) NULL,
    ADDRESS VARCHAR(500) NULL,
    CITY VARCHAR(100) NULL,
    STATE VARCHAR(50) NULL,
    ZIP_CODE VARCHAR(20) NULL,
    CREDIT_SCORE INT NULL,
    RISK_RATING VARCHAR(20) DEFAULT 'Medium',
    KYC_STATUS VARCHAR(20) DEFAULT 'Pending',
    CUSTOMER_SINCE DATETIME2 NOT NULL,
    LAST_LOGIN_DATE DATETIME2 NULL,
    STATUS VARCHAR(20) DEFAULT 'Active',
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_CUSTOMERS PRIMARY KEY (CUSTOMER_ID),
    CONSTRAINT FK_CUSTOMERS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID),
    CONSTRAINT UQ_CUSTOMERS_NUMBER UNIQUE (INSTITUTION_ID, CUSTOMER_NUMBER)
);

-- Account Types and Products
IF OBJECT_ID('CORE.PRODUCT_TYPES', 'U') IS NOT NULL
    DROP TABLE CORE.PRODUCT_TYPES;

CREATE TABLE CORE.PRODUCT_TYPES (
    PRODUCT_TYPE_ID INT IDENTITY(1,1) NOT NULL,
    PRODUCT_CODE VARCHAR(20) NOT NULL,
    PRODUCT_NAME VARCHAR(100) NOT NULL,
    PRODUCT_CATEGORY VARCHAR(50) NOT NULL,
    INTEREST_RATE DECIMAL(5,4) NULL,
    MINIMUM_BALANCE DECIMAL(12,2) DEFAULT 0,
    MONTHLY_FEE DECIMAL(8,2) DEFAULT 0,
    OVERDRAFT_FEE DECIMAL(8,2) NULL,
    IS_ACTIVE BIT DEFAULT 1,
    
    CONSTRAINT PK_PRODUCT_TYPES PRIMARY KEY (PRODUCT_TYPE_ID),
    CONSTRAINT UQ_PRODUCT_TYPES_CODE UNIQUE (PRODUCT_CODE)
);

-- Customer Accounts
IF OBJECT_ID('CORE.ACCOUNTS', 'U') IS NOT NULL
    DROP TABLE CORE.ACCOUNTS;

CREATE TABLE CORE.ACCOUNTS (
    ACCOUNT_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    PRODUCT_TYPE_ID INT NOT NULL,
    ACCOUNT_NUMBER VARCHAR(50) NOT NULL,
    ACCOUNT_NAME VARCHAR(200) NULL,
    CURRENT_BALANCE DECIMAL(15,2) DEFAULT 0,
    AVAILABLE_BALANCE DECIMAL(15,2) DEFAULT 0,
    PENDING_BALANCE DECIMAL(15,2) DEFAULT 0,
    OVERDRAFT_LIMIT DECIMAL(12,2) DEFAULT 0,
    INTEREST_RATE DECIMAL(5,4) NULL,
    OPEN_DATE DATETIME2 NOT NULL,
    LAST_TRANSACTION_DATE DATETIME2 NULL,
    STATUS VARCHAR(20) DEFAULT 'Active',
    CLOSE_DATE DATETIME2 NULL,
    CLOSE_REASON VARCHAR(100) NULL,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_ACCOUNTS PRIMARY KEY (ACCOUNT_ID),
    CONSTRAINT FK_ACCOUNTS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID),
    CONSTRAINT FK_ACCOUNTS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CORE.CUSTOMERS(CUSTOMER_ID),
    CONSTRAINT FK_ACCOUNTS_PRODUCT_TYPE FOREIGN KEY (PRODUCT_TYPE_ID) REFERENCES CORE.PRODUCT_TYPES(PRODUCT_TYPE_ID),
    CONSTRAINT UQ_ACCOUNTS_NUMBER UNIQUE (INSTITUTION_ID, ACCOUNT_NUMBER)
);

-- =============================================================================
-- PAYMENT PROCESSING
-- =============================================================================

-- Payment Networks and Processors
IF OBJECT_ID('PAYMENTS.PAYMENT_NETWORKS', 'U') IS NOT NULL
    DROP TABLE PAYMENTS.PAYMENT_NETWORKS;

CREATE TABLE PAYMENTS.PAYMENT_NETWORKS (
    NETWORK_ID INT IDENTITY(1,1) NOT NULL,
    NETWORK_CODE VARCHAR(20) NOT NULL,
    NETWORK_NAME VARCHAR(100) NOT NULL,
    NETWORK_TYPE VARCHAR(50) NOT NULL,
    PROCESSING_FEE DECIMAL(8,4) NULL,
    SETTLEMENT_TIME VARCHAR(50) NULL,
    MAX_TRANSACTION_AMOUNT DECIMAL(15,2) NULL,
    IS_ACTIVE BIT DEFAULT 1,
    
    CONSTRAINT PK_PAYMENT_NETWORKS PRIMARY KEY (NETWORK_ID),
    CONSTRAINT UQ_PAYMENT_NETWORKS_CODE UNIQUE (NETWORK_CODE)
);

-- Payment Transactions
IF OBJECT_ID('PAYMENTS.TRANSACTIONS', 'U') IS NOT NULL
    DROP TABLE PAYMENTS.TRANSACTIONS;

CREATE TABLE PAYMENTS.TRANSACTIONS (
    TRANSACTION_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    NETWORK_ID INT NOT NULL,
    TRANSACTION_NUMBER VARCHAR(50) NOT NULL,
    PAYMENT_TYPE VARCHAR(50) NOT NULL,
    DEBIT_ACCOUNT_ID INT NULL,
    CREDIT_ACCOUNT_ID INT NULL,
    EXTERNAL_ACCOUNT_NUMBER VARCHAR(50) NULL,
    EXTERNAL_ROUTING_NUMBER VARCHAR(9) NULL,
    EXTERNAL_BANK_NAME VARCHAR(200) NULL,
    AMOUNT DECIMAL(15,2) NOT NULL,
    CURRENCY VARCHAR(3) DEFAULT 'USD',
    TRANSACTION_DATE DATETIME2 NOT NULL,
    EFFECTIVE_DATE DATE NOT NULL,
    SETTLEMENT_DATE DATE NULL,
    STATUS VARCHAR(20) DEFAULT 'Pending',
    STATUS_REASON VARCHAR(200) NULL,
    DESCRIPTION VARCHAR(500) NULL,
    REFERENCE VARCHAR(100) NULL,
    PROCESSING_FEE DECIMAL(8,2) DEFAULT 0,
    RISK_SCORE INT NULL,
    FRAUD_FLAG BIT DEFAULT 0,
    COMPLIANCE_FLAG BIT DEFAULT 0,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    MODIFIED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_TRANSACTIONS PRIMARY KEY (TRANSACTION_ID),
    CONSTRAINT FK_TRANSACTIONS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID),
    CONSTRAINT FK_TRANSACTIONS_NETWORK FOREIGN KEY (NETWORK_ID) REFERENCES PAYMENTS.PAYMENT_NETWORKS(NETWORK_ID),
    CONSTRAINT FK_TRANSACTIONS_DEBIT_ACCOUNT FOREIGN KEY (DEBIT_ACCOUNT_ID) REFERENCES CORE.ACCOUNTS(ACCOUNT_ID),
    CONSTRAINT FK_TRANSACTIONS_CREDIT_ACCOUNT FOREIGN KEY (CREDIT_ACCOUNT_ID) REFERENCES CORE.ACCOUNTS(ACCOUNT_ID),
    CONSTRAINT UQ_TRANSACTIONS_NUMBER UNIQUE (INSTITUTION_ID, TRANSACTION_NUMBER)
);

-- =============================================================================
-- CARD SERVICES
-- =============================================================================

-- Card Programs
IF OBJECT_ID('CARDS.CARD_PROGRAMS', 'U') IS NOT NULL
    DROP TABLE CARDS.CARD_PROGRAMS;

CREATE TABLE CARDS.CARD_PROGRAMS (
    PROGRAM_ID INT IDENTITY(1,1) NOT NULL,
    PROGRAM_CODE VARCHAR(20) NOT NULL,
    PROGRAM_NAME VARCHAR(100) NOT NULL,
    CARD_TYPE VARCHAR(50) NOT NULL,
    CARD_NETWORK VARCHAR(20) NOT NULL,
    BIN VARCHAR(6) NOT NULL,
    ANNUAL_FEE DECIMAL(8,2) DEFAULT 0,
    INTEREST_RATE DECIMAL(6,4) NULL,
    CASH_ADVANCE_FEE DECIMAL(5,4) NULL,
    FOREIGN_TRANSACTION_FEE DECIMAL(5,4) NULL,
    REWARDS_PROGRAM VARCHAR(100) NULL,
    IS_ACTIVE BIT DEFAULT 1,
    
    CONSTRAINT PK_CARD_PROGRAMS PRIMARY KEY (PROGRAM_ID),
    CONSTRAINT UQ_CARD_PROGRAMS_CODE UNIQUE (PROGRAM_CODE)
);

-- Card Accounts
IF OBJECT_ID('CARDS.CARD_ACCOUNTS', 'U') IS NOT NULL
    DROP TABLE CARDS.CARD_ACCOUNTS;

CREATE TABLE CARDS.CARD_ACCOUNTS (
    CARD_ACCOUNT_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    PROGRAM_ID INT NOT NULL,
    LINKED_ACCOUNT_ID INT NULL,
    CARD_NUMBER_ENCRYPTED VARBINARY(256) NOT NULL,
    CARD_NUMBER_MASKED VARCHAR(20) NOT NULL,
    EXPIRATION_DATE VARCHAR(5) NOT NULL,
    CVV_ENCRYPTED VARBINARY(256) NULL,
    CARD_HOLDER_NAME VARCHAR(200) NOT NULL,
    CREDIT_LIMIT DECIMAL(12,2) NULL,
    AVAILABLE_CREDIT DECIMAL(12,2) NULL,
    CURRENT_BALANCE DECIMAL(12,2) DEFAULT 0,
    MINIMUM_PAYMENT DECIMAL(10,2) DEFAULT 0,
    LAST_PAYMENT_DATE DATETIME2 NULL,
    NEXT_PAYMENT_DUE DATE NULL,
    STATUS VARCHAR(20) DEFAULT 'Active',
    ISSUE_DATE DATETIME2 NOT NULL,
    ACTIVATION_DATE DATETIME2 NULL,
    BLOCK_REASON VARCHAR(200) NULL,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_CARD_ACCOUNTS PRIMARY KEY (CARD_ACCOUNT_ID),
    CONSTRAINT FK_CARD_ACCOUNTS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID),
    CONSTRAINT FK_CARD_ACCOUNTS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CORE.CUSTOMERS(CUSTOMER_ID),
    CONSTRAINT FK_CARD_ACCOUNTS_PROGRAM FOREIGN KEY (PROGRAM_ID) REFERENCES CARDS.CARD_PROGRAMS(PROGRAM_ID),
    CONSTRAINT FK_CARD_ACCOUNTS_LINKED_ACCOUNT FOREIGN KEY (LINKED_ACCOUNT_ID) REFERENCES CORE.ACCOUNTS(ACCOUNT_ID)
);

-- Card Transactions
IF OBJECT_ID('CARDS.CARD_TRANSACTIONS', 'U') IS NOT NULL
    DROP TABLE CARDS.CARD_TRANSACTIONS;

CREATE TABLE CARDS.CARD_TRANSACTIONS (
    CARD_TRANSACTION_ID INT IDENTITY(1,1) NOT NULL,
    CARD_ACCOUNT_ID INT NOT NULL,
    TRANSACTION_TYPE VARCHAR(50) NOT NULL,
    AMOUNT DECIMAL(12,2) NOT NULL,
    CURRENCY VARCHAR(3) DEFAULT 'USD',
    MERCHANT_NAME VARCHAR(200) NULL,
    MERCHANT_CATEGORY VARCHAR(100) NULL,
    MERCHANT_ID VARCHAR(50) NULL,
    TRANSACTION_DATE DATETIME2 NOT NULL,
    POSTING_DATE DATETIME2 NULL,
    AUTHORIZATION_CODE VARCHAR(20) NULL,
    NETWORK_TRANSACTION_ID VARCHAR(50) NULL,
    STATUS VARCHAR(20) DEFAULT 'Pending',
    DECLINE_REASON VARCHAR(200) NULL,
    LOCATION VARCHAR(200) NULL,
    COUNTRY VARCHAR(100) NULL,
    RISK_SCORE INT NULL,
    FRAUD_FLAG BIT DEFAULT 0,
    REWARDS_EARNED DECIMAL(8,2) DEFAULT 0,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_CARD_TRANSACTIONS PRIMARY KEY (CARD_TRANSACTION_ID),
    CONSTRAINT FK_CARD_TRANSACTIONS_CARD_ACCOUNT FOREIGN KEY (CARD_ACCOUNT_ID) REFERENCES CARDS.CARD_ACCOUNTS(CARD_ACCOUNT_ID)
);

-- =============================================================================
-- DIGITAL BANKING
-- =============================================================================

-- Digital Banking Users
IF OBJECT_ID('DIGITAL.DIGITAL_USERS', 'U') IS NOT NULL
    DROP TABLE DIGITAL.DIGITAL_USERS;

CREATE TABLE DIGITAL.DIGITAL_USERS (
    USER_ID INT IDENTITY(1,1) NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    USERNAME VARCHAR(100) NOT NULL,
    PASSWORD_HASH VARBINARY(256) NOT NULL,
    EMAIL VARCHAR(250) NOT NULL,
    MOBILE_PHONE VARCHAR(20) NULL,
    LAST_LOGIN_DATE DATETIME2 NULL,
    LOGIN_ATTEMPTS INT DEFAULT 0,
    IS_LOCKED BIT DEFAULT 0,
    LOCKOUT_END_DATE DATETIME2 NULL,
    TWO_FACTOR_ENABLED BIT DEFAULT 0,
    PREFERRED_NOTIFICATION_METHOD VARCHAR(20) DEFAULT 'Email',
    STATUS VARCHAR(20) DEFAULT 'Active',
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_DIGITAL_USERS PRIMARY KEY (USER_ID),
    CONSTRAINT FK_DIGITAL_USERS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CORE.CUSTOMERS(CUSTOMER_ID),
    CONSTRAINT UQ_DIGITAL_USERS_USERNAME UNIQUE (USERNAME),
    CONSTRAINT UQ_DIGITAL_USERS_EMAIL UNIQUE (EMAIL)
);

-- Digital Banking Sessions
IF OBJECT_ID('DIGITAL.USER_SESSIONS', 'U') IS NOT NULL
    DROP TABLE DIGITAL.USER_SESSIONS;

CREATE TABLE DIGITAL.USER_SESSIONS (
    SESSION_ID INT IDENTITY(1,1) NOT NULL,
    USER_ID INT NOT NULL,
    SESSION_TOKEN VARCHAR(500) NOT NULL,
    DEVICE_TYPE VARCHAR(50) NULL,
    DEVICE_ID VARCHAR(200) NULL,
    IP_ADDRESS VARCHAR(45) NULL,
    USER_AGENT VARCHAR(500) NULL,
    START_TIME DATETIME2 DEFAULT GETDATE(),
    LAST_ACTIVITY DATETIME2 DEFAULT GETDATE(),
    END_TIME DATETIME2 NULL,
    STATUS VARCHAR(20) DEFAULT 'Active',
    
    CONSTRAINT PK_USER_SESSIONS PRIMARY KEY (SESSION_ID),
    CONSTRAINT FK_USER_SESSIONS_USER FOREIGN KEY (USER_ID) REFERENCES DIGITAL.DIGITAL_USERS(USER_ID)
);

-- Bill Pay Payees
IF OBJECT_ID('DIGITAL.BILL_PAY_PAYEES', 'U') IS NOT NULL
    DROP TABLE DIGITAL.BILL_PAY_PAYEES;

CREATE TABLE DIGITAL.BILL_PAY_PAYEES (
    PAYEE_ID INT IDENTITY(1,1) NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    PAYEE_NAME VARCHAR(200) NOT NULL,
    PAYEE_TYPE VARCHAR(50) NOT NULL,
    ACCOUNT_NUMBER VARCHAR(100) NULL,
    ADDRESS VARCHAR(500) NULL,
    CITY VARCHAR(100) NULL,
    STATE VARCHAR(50) NULL,
    ZIP_CODE VARCHAR(20) NULL,
    PHONE VARCHAR(20) NULL,
    IS_ACTIVE BIT DEFAULT 1,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_BILL_PAY_PAYEES PRIMARY KEY (PAYEE_ID),
    CONSTRAINT FK_BILL_PAY_PAYEES_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CORE.CUSTOMERS(CUSTOMER_ID)
);

-- =============================================================================
-- RISK MANAGEMENT
-- =============================================================================

-- Risk Rules and Models
IF OBJECT_ID('RISK.RISK_RULES', 'U') IS NOT NULL
    DROP TABLE RISK.RISK_RULES;

CREATE TABLE RISK.RISK_RULES (
    RULE_ID INT IDENTITY(1,1) NOT NULL,
    RULE_NAME VARCHAR(100) NOT NULL,
    RULE_TYPE VARCHAR(50) NOT NULL,
    RULE_DESCRIPTION VARCHAR(500) NULL,
    RISK_SCORE INT NOT NULL,
    SEVERITY VARCHAR(20) NOT NULL,
    IS_ACTIVE BIT DEFAULT 1,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_RISK_RULES PRIMARY KEY (RULE_ID)
);

-- Risk Events and Alerts
IF OBJECT_ID('RISK.RISK_EVENTS', 'U') IS NOT NULL
    DROP TABLE RISK.RISK_EVENTS;

CREATE TABLE RISK.RISK_EVENTS (
    EVENT_ID INT IDENTITY(1,1) NOT NULL,
    RULE_ID INT NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    CUSTOMER_ID INT NULL,
    ACCOUNT_ID INT NULL,
    TRANSACTION_ID INT NULL,
    CARD_TRANSACTION_ID INT NULL,
    EVENT_TYPE VARCHAR(50) NOT NULL,
    EVENT_DESCRIPTION VARCHAR(500) NULL,
    RISK_SCORE INT NOT NULL,
    SEVERITY VARCHAR(20) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'Open',
    ASSIGNED_TO VARCHAR(100) NULL,
    RESOLUTION_NOTES VARCHAR(1000) NULL,
    EVENT_DATE DATETIME2 DEFAULT GETDATE(),
    RESOLVED_DATE DATETIME2 NULL,
    
    CONSTRAINT PK_RISK_EVENTS PRIMARY KEY (EVENT_ID),
    CONSTRAINT FK_RISK_EVENTS_RULE FOREIGN KEY (RULE_ID) REFERENCES RISK.RISK_RULES(RULE_ID),
    CONSTRAINT FK_RISK_EVENTS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID),
    CONSTRAINT FK_RISK_EVENTS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CORE.CUSTOMERS(CUSTOMER_ID)
);

-- =============================================================================
-- COMPLIANCE AND REGULATORY
-- =============================================================================

-- Regulatory Reports
IF OBJECT_ID('COMPLIANCE.REGULATORY_REPORTS', 'U') IS NOT NULL
    DROP TABLE COMPLIANCE.REGULATORY_REPORTS;

CREATE TABLE COMPLIANCE.REGULATORY_REPORTS (
    REPORT_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    REPORT_TYPE VARCHAR(100) NOT NULL,
    REPORTING_PERIOD VARCHAR(50) NOT NULL,
    REGULATOR_ID VARCHAR(50) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'Draft',
    SUBMISSION_DATE DATETIME2 NULL,
    DUE_DATE DATETIME2 NOT NULL,
    FILE_PATH VARCHAR(500) NULL,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_REGULATORY_REPORTS PRIMARY KEY (REPORT_ID),
    CONSTRAINT FK_REGULATORY_REPORTS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID)
);

-- OFAC/Sanctions Screening
IF OBJECT_ID('COMPLIANCE.SANCTIONS_SCREENING', 'U') IS NOT NULL
    DROP TABLE COMPLIANCE.SANCTIONS_SCREENING;

CREATE TABLE COMPLIANCE.SANCTIONS_SCREENING (
    SCREENING_ID INT IDENTITY(1,1) NOT NULL,
    CUSTOMER_ID INT NULL,
    TRANSACTION_ID INT NULL,
    ENTITY_NAME VARCHAR(200) NOT NULL,
    SCREENING_TYPE VARCHAR(50) NOT NULL,
    MATCH_TYPE VARCHAR(50) NULL,
    MATCH_SCORE DECIMAL(5,2) NULL,
    LIST_NAME VARCHAR(100) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'Pending',
    REVIEW_NOTES VARCHAR(1000) NULL,
    SCREENING_DATE DATETIME2 DEFAULT GETDATE(),
    REVIEWED_BY VARCHAR(100) NULL,
    REVIEWED_DATE DATETIME2 NULL,
    
    CONSTRAINT PK_SANCTIONS_SCREENING PRIMARY KEY (SCREENING_ID),
    CONSTRAINT FK_SANCTIONS_SCREENING_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CORE.CUSTOMERS(CUSTOMER_ID)
);

-- =============================================================================
-- ANALYTICS AND REPORTING
-- =============================================================================

-- Business Intelligence Metrics
IF OBJECT_ID('ANALYTICS.DAILY_METRICS', 'U') IS NOT NULL
    DROP TABLE ANALYTICS.DAILY_METRICS;

CREATE TABLE ANALYTICS.DAILY_METRICS (
    METRIC_ID INT IDENTITY(1,1) NOT NULL,
    INSTITUTION_ID INT NOT NULL,
    METRIC_DATE DATE NOT NULL,
    TOTAL_TRANSACTIONS BIGINT DEFAULT 0,
    TOTAL_TRANSACTION_VOLUME DECIMAL(18,2) DEFAULT 0,
    TOTAL_CUSTOMERS BIGINT DEFAULT 0,
    NEW_CUSTOMERS BIGINT DEFAULT 0,
    ACTIVE_DIGITAL_USERS BIGINT DEFAULT 0,
    TOTAL_DEPOSITS DECIMAL(18,2) DEFAULT 0,
    TOTAL_LOANS DECIMAL(18,2) DEFAULT 0,
    FRAUD_DETECTED_COUNT BIGINT DEFAULT 0,
    FRAUD_LOSS_AMOUNT DECIMAL(12,2) DEFAULT 0,
    COMPLIANCE_ALERTS BIGINT DEFAULT 0,
    SYSTEM_UPTIME DECIMAL(5,2) DEFAULT 100.00,
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    
    CONSTRAINT PK_DAILY_METRICS PRIMARY KEY (METRIC_ID),
    CONSTRAINT FK_DAILY_METRICS_INSTITUTION FOREIGN KEY (INSTITUTION_ID) REFERENCES CORE.FINANCIAL_INSTITUTIONS(INSTITUTION_ID),
    CONSTRAINT UQ_DAILY_METRICS_DATE UNIQUE (INSTITUTION_ID, METRIC_DATE)
);

/*

-- =============================================================================
-- VIEWS
-- =============================================================================

-- Transaction Summary View
CREATE OR ALTER VIEW PAYMENTS.VW_TRANSACTION_SUMMARY AS
SELECT 
    t.TRANSACTION_ID,
    t.INSTITUTION_ID,
    fi.INSTITUTION_NAME,
    t.TRANSACTION_NUMBER,
    t.PAYMENT_TYPE,
    t.AMOUNT,
    t.TRANSACTION_DATE,
    t.STATUS,
    pn.NETWORK_NAME,
    da.ACCOUNT_NUMBER AS DEBIT_ACCOUNT,
    ca.ACCOUNT_NUMBER AS CREDIT_ACCOUNT,
    t.FRAUD_FLAG,
    t.RISK_SCORE
FROM PAYMENTS.TRANSACTIONS t
JOIN CORE.FINANCIAL_INSTITUTIONS fi ON t.INSTITUTION_ID = fi.INSTITUTION_ID
JOIN PAYMENTS.PAYMENT_NETWORKS pn ON t.NETWORK_ID = pn.NETWORK_ID
LEFT JOIN CORE.ACCOUNTS da ON t.DEBIT_ACCOUNT_ID = da.ACCOUNT_ID
LEFT JOIN CORE.ACCOUNTS ca ON t.CREDIT_ACCOUNT_ID = ca.ACCOUNT_ID;

-- Daily Analytics View
CREATE OR ALTER VIEW ANALYTICS.VW_DAILY_ANALYTICS AS
SELECT 
    dm.METRIC_DATE,
    fi.INSTITUTION_NAME,
    dm.TOTAL_TRANSACTIONS,
    dm.TOTAL_TRANSACTION_VOLUME,
    dm.TOTAL_CUSTOMERS,
    dm.NEW_CUSTOMERS,
    dm.ACTIVE_DIGITAL_USERS,
    dm.FRAUD_DETECTED_COUNT,
    dm.FRAUD_LOSS_AMOUNT,
    dm.COMPLIANCE_ALERTS,
    CASE 
        WHEN dm.TOTAL_TRANSACTIONS > 0 
        THEN ROUND(CAST(dm.FRAUD_DETECTED_COUNT AS FLOAT) * 100.0 / dm.TOTAL_TRANSACTIONS, 4)
        ELSE 0 
    END AS FRAUD_RATE_PERCENT
FROM ANALYTICS.DAILY_METRICS dm
JOIN CORE.FINANCIAL_INSTITUTIONS fi ON dm.INSTITUTION_ID = fi.INSTITUTION_ID;

*/